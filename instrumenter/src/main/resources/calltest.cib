ctx {
    contArgVar;
    example;
    other;
};
ext com.engineersbox.continuity.core.annotation.BytecodeInternal $ Accessor;

let testString: str = "string";
let arrayVariable: int32[] = {
    434,
    8234532
};
// TODO: Fix this type issue with float64 being treated as float32
let float: float64 = 3.58923598235982359823598235742423423442332444444244234342342444233442342344423424244429235789235;

fn test() {
    let test: Object = std::loadVar(ctx::contArgVar);
    let.test;
    std::loadVar(ctx::contArgVar);
};

std::call(ext::Accessor->getMethod(ctx::example->get().replace('$', '.')), std::loadVar(ctx::contArgVar));
std::combineIf(
    ctx::example->get().contains("$") && (let.float >= let.arrayVariable[0] ^ let.testString == "string"),
    fn.test()
);
std::combineIf(
    ctx::other != null,
    std::lineNumber(ctx::other)
);

if (!ctx::example->get().contains("$") && (5.3 >= let.arrayVariable[1] ^ "string" == "string")) {
    std::loadVar(ctx::contArgVar);
} else if (ctx::other == null) {
    std::lineNumber(ctx::other);
} else if (ctx::example->get().contains("$")) {
    fn.test();
} else {
    std::call(ext::Accessor->getMethod(ctx::example->get().replace('$', '.')), std::loadVar(ctx::contArgVar));
};